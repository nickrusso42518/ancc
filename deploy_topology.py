#!/usr/bin/env python

"""
Author: Nick Russo
Purpose: Tests Batfish on sample Cisco Live sessions focused
on the OSPF routing protocol using archived configurations.
"""

import json
import httpx


def main():
    # Load the topology generated by the Batfish testing
    with open("topology.json", "r", encoding="utf-8") as handle:
        topology = json.load(handle)

    base_url = "http://localhost:3080/v2"
    with httpx.Client() as client:
        # Get compute nodes and find the GNS3 VM
        resp = client.get(f"{base_url}/computes")
        for comp in resp.json():
            if name == "gns3???":
                comp_uuid = comp["compute_uuid"]
                break
        else:
            raise ValueError("compute not found")

        # Get node templates and find the L3IOU (or whichever you have)
        resp = client.get("{base_url}/templates")
        for temp in resp.json():
            if name == "L3IOU":
                temp_uuid = temp["template_id"]
                break
        else:
            raise ValueError("template not found")

        # Create a new project and store the UUID
        resp = client.post(f"{base_url}/projects", json={"name": "ancc_pre"})
        proj_uuid = resp.json()["project_id"]

        # Iterate over the unique nodes, deploying each based on the
        # template. Certain parameters can be overridden/customized.
        for i, node in enumerate(["R01"]):
            x, y = (i * 10 % 40, i // 4 * 10)
            console = 5000 + int(node[-2:])
            node_body = {
                "name": node,
                "console": console,
                "x": x,
                "y": y,
                "compute_id": comp_uuid,
            }
            print(f"Adding {node} at ({x},{y}) via {console}")
            resp = client.post(
                f"{base_url}/projects/{proj_uuid}/templates/{temp_uuid}",
                json=node_body,
            )

            # TODO record node UUIDs and ports?

        for links in topology:
            # since topo is sorted, after all R01 is done, ignore all
            # links with R01 as the remote, etc
            pass


if __name__ == "__main__":
    main()
