#!/usr/bin/env python

"""
Author: Nick Russo
Purpose: Tests Batfish on sample Cisco Live sessions focused
on the OSPF routing protocol using archived configurations.
"""

import json
import httpx


def main(base_url):
    """
    Execution starts here.
    """

    # Load the topology generated by the Batfish testing
    with open("topology.json", "r", encoding="utf-8") as handle:
        topology = json.load(handle)

    with httpx.Client() as client:
        # Get compute nodes and find the GNS3 VM
        for comp in _req(client, f"{base_url}/computes"):
            if comp["name"].startswith("GNS3 VM"):
                print("comp_id:", comp_id := comp["compute_id"])
                break
        else:
            raise ValueError("GNS3 VM compute not found")

        # Get node templates and find the L3IOU (or whichever you have)
        for tmpl in _req(client, "{base_url}/templates"):
            if tmpl["name"] == "L3IOU" and tmpl["category"] == "router":
                print("tmpl_id:", tmpl_id := tmpl["template_id"])
                break
        else:
            raise ValueError("L3IOU template not found")

        # Create a new project and store the UUID
        proj_id = _req(
            client=client,
            url=f"{base_url}/projects",
            method="post",
            jsonbody={"name": "ancc_pre"},
        )["project_id"]

        # Iterate over the unique nodes, deploying each based on the
        # template. Certain parameters can be overridden/customized.
        for i, node in enumerate(["R01"]):
            x, y = (i * 10 % 40, i // 4 * 10)
            node_body = {
                "name": node,
                "x": x,
                "y": y,
                "compute_id": comp_id,
            }

            depl = _req(
                client=client,
                url=f"{base_url}/projects/{proj_id}/templates/{tmpl_id}",
                method="post",
                jsonbody=node_body,
            )
            # print(f"Adding {node} at ({x},{y}) via {console?}")

            # TODO record node UUIDs and ports?

        for links in topology:
            # since topo is sorted, after all R01 is done, ignore all
            # links with R01 as the remote, etc
            pass


def _req(client, url, method="get", jsonbody=None):
    """
    Issue an HTTP request using the supplied parameters, perform
    error checking to ensure status code is less than 400, then
    return the JSON structured data from the message body.
    """
    resp = client.request(url=url, method=method, json=jsonbody)
    resp.raise_for_status()
    return resp.json()


if __name__ == "__main__":
    # GNS3 client host, not the GN3 VM
    main("http://192.168.120.1:3080/v2")
